<?phpdeclare(strict_types=1);class GameConditions{    public const MAX_BATTLE_SHIPS = 2;    public const MAX_X            = 4;    public const MAX_Y            = 4;}class Cell{    public ?BattleShip $battleShip = null;}class BattleField{    /** @var Cell[][] */    private array $map = [];    /** @var BattleShip[] */    private array $battleShips = [];    public function __construct()    {        for ($y = 0; $y < GameConditions::MAX_Y; $y++) {            for ($x = 0; $x < GameConditions::MAX_X; $x++) {                $this->map[$y][$x] = new Cell();            }        }    }    public function placeBattleShip(BattleShip $battleShip): void    {        $position = $battleShip->getPosition();        $this->map[$position->y][$position->x]->battleShip = $battleShip;        $this->battleShips[] = $battleShip;    }    public function hitSomeShip(Position $position): bool    {        return $this->map[$position->y][$position->x]->battleShip !== null;    }    public function takeBattleShipAt(Position $position): BattleShip    {        return $this->map[$position->y][$position->x]->battleShip;    }    /**     * @return BattleShip[]     */    public function getBattleShips(): array    {        return $this->battleShips;    }}class Player{    private string $name;    public function __construct(string $name)    {        $this->name = $name;    }    public function getName(): string    {        return $this->name;    }}class NPC extends Player{    public function __construct()    {        parent::__construct('Computer');    }}class Position{    public int $x;    public int $y;    public function toScreenPosition(): self    {        $position    = new self();        $position->x = $this->x + 1;        $position->y = $this->y + 1;        return $position;    }}class BattleShip{    public bool $isAlive = true;    private Player   $player;    private Position $position;    public function __construct(Player $player, Position $position)    {        $this->player   = $player;        $this->position = $position;    }    public function getPlayer(): Player    {        return $this->player;    }    public function getPosition(): Position    {        return $this->position;    }}showWelcomeScreen();$playerName = askForPlayerName();clearScreen();$battleField = new BattleField();$player      = new Player($playerName);$npc         = new NPC();try {    renderBattleField($battleField, $player);    newLine();    foreach (placeYourBattleShips($player) as $battleShip) {        $battleField->placeBattleShip($battleShip);    }    foreach (placeYourBattleShips($npc) as $battleShip) {        $battleField->placeBattleShip($battleShip);    }    battle($battleField, $player, $npc);} catch (Exception $e) {    echo "!sorry we got some errors!\n";    exit(1);}function renderBattleField(BattleField $battleField, Player $player){    renderBattleFieldTopNavigation();    newLine();    $position = new Position();    $i = 0;    for ($y = 0; $y < GameConditions::MAX_Y; $y++) {        echo ' ' . ($i + 1) . "\t";        $i++;        for ($x = 0; $x < GameConditions::MAX_X; $x++) {            $position->x = $x;            $position->y = $y;            if (!$battleField->hitSomeShip($position)) {                echo " ~  ";                continue;            }            $battleShip = $battleField->takeBattleShipAt($position);            if ($battleShip->getPlayer() === $player) {                if ($battleShip->isAlive) {                    echo " ^  ";                } else {                    echo " X  ";                }            } elseif ($battleShip->isAlive) {                echo " ~  ";            } else {                echo " *  ";            }        }        newLine();    }}function renderBattleFieldTopNavigation(): void{    echo "\t";    for ($i = 0; $i < GameConditions::MAX_X; $i++) {        if ($i > 0) {            echo '  ' . ($i + 1) . ' ';        } else {            echo ' ' . ($i + 1) . ' ';        }    }}function newLine(): void{    echo "\n";}/** * @param BattleField $battleField * @param Player      $player * @param NPC         $npc * * @return void * @throws Exception */function battle(BattleField $battleField, Player $player, NPC $npc){    while (true) {        clearScreen();        showPlayerName($player);        renderBattleField($battleField, $player);        $strikePosition = askForStrikePosition();        attackAt($battleField, $npc, $strikePosition);        $npcStrikePosition = pickRandomPosition();        attackAt($battleField, $player, $npcStrikePosition);        if (countShipsAlive($player, $battleField->getBattleShips()) === 0) {            echo "Sorry, you have lost!\n";            exit(0);        }        if (countShipsAlive($npc, $battleField->getBattleShips()) === 0) {            echo "Yay, you hav won the match!\n";            exit(0);        }        readline("press enter for next round");    }}function showWelcomeScreen(): void{    echo "Welcome to Battleships\n\n";}function askForPlayerName(): string{    return readline('Chose your name: ');}/** * @param Player $player * * @return BattleShip[] * @throws Exception */function placeYourBattleShips(Player $player): array{    $battleShips = [];    if ($player instanceof NPC) {        for ($i = 0; $i < GameConditions::MAX_BATTLE_SHIPS; $i++) {            $position      = pickRandomPosition();            $battleShips[] = new BattleShip($player, $position);        }    } else {        for ($i = 0; $i < GameConditions::MAX_BATTLE_SHIPS; $i++) {            $battleShipNumber = $i + 1;            echo "place your battleship ($battleShipNumber), chose the x and y coordinate\n";            $position      = askForPosition();            $battleShips[] = new BattleShip($player, $position);        }    }    return $battleShips;}function askForPosition(): Position{    $position    = new Position();    $position->x = ((int)readline('x = ')) - 1;    $position->y = ((int)readline('y = ')) - 1;    if ($position->x < 0 || $position->y < 0) {        echo "x und y darf nicht kleiner 1 sein\n";        return askForPosition();    }    if ($position->x > GameConditions::MAX_X || $position->y > GameConditions::MAX_Y) {        echo "x und y darf nicht größer " . GameConditions::MAX_X . " x " . GameConditions::MAX_Y . " sein\n";        return askForPosition();    }    return $position;}/** * @return Position * @throws Exception */function pickRandomPosition(): Position{    $position    = new Position();    $position->x = random_int(0, GameConditions::MAX_X - 1);    $position->y = random_int(0, GameConditions::MAX_Y - 1);    return $position;}function clearScreen(): void{    system('clear');    usleep(100);}function showPlayerName(Player $player){    echo "Player {$player->getName()}\n";    echo "================================================\n";}function askForStrikePosition(): Position{    echo "Where you want to attack?\n";    return askForPosition();}/** * @param Player       $player * @param BattleShip[] $battleShips * * @return int */function countShipsAlive(Player $player, array $battleShips): int{    $shipsAlive = 0;    foreach ($battleShips as $battleShip) {        if ($battleShip->isAlive && $battleShip->getPlayer() === $player) {            $shipsAlive++;        }    }    return $shipsAlive;}function attackAt(BattleField $battleField, Player $player, Position $strikePosition): void{    $screenPosition = $strikePosition->toScreenPosition();    echo "> attack against {$player->getName()} at position $screenPosition->x x $screenPosition->y ...\n";    if ($battleField->hitSomeShip($strikePosition)) {        $battleShip = $battleField->takeBattleShipAt($strikePosition);        if ($battleShip->getPlayer() === $player) {            $battleShip->isAlive = false;            echo "> got some hit\n";        }    } else {        echo "> nothing hit\n";    }}